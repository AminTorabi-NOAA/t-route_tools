Polygon-Windowing project. First checkin: 21-Sep-2023.

1) Brief description: the Polygon-Windowing project is a collection of routines along with a workflow to enable efficient geopackage subsetting for vector layers with and without geometry features. It comprises part of the t-route subsetting effort and is based on a coordinates-only windowing approach. Polygons with arbitrary shapes can be constructed and used to "cookie-cut" a corresponding part of the geopackage. Subsetting is implemented without regard to flow patterns - for extractions along flow networks, whether based on the geography-only subset or otherwise, please refer to other parts of the subsetting effort. coordinates presently hardcoded to EPSG:5070 - NAD83 / Conus Albers, please submit request if other coordinate system options are needed

2) Environment and dependencies:

The code relies on QGIS and was developed to run in the Python environment built into QGIS 3.32.1 (Lima) on a Windows 11 environment. However, we do not anticipate problems running in any QGIS 3 installation. The project also relies on the following Python packages (in addition to preinstalled ones) which can be installed as described in 3:

    	 - toolz
	 - deprecated
	 - netCDF4
	 - joblib
	 - xarray
	 - pyarrow
	 - importlib
	 - random
	 

3) Installation and setup:

- Install QGIS or upgrade to QGIS 3.X. 

- Run the OSGeo4W Shell packaged with QGIS (in a Windows environment, type "OSGeo4W" in the search bar).

- Install the following Python packages (LIBRARY to be replaced by all the Python packages listed in 2):

  	  > python -m pip install LIBRARY

- If subsequent running of the code (section 4) generates any errors of missing Python packages, please install these in OSGeo4W using the "python -m pip ..." command.

4) Code execution:

- Check out or download the repository and place it in a folder of your choice, e.g., "PolygonWindowing". There are two folders, "src" and "models", along with this file, in the newly created folder. 

- Open QGIS and start the Python interpreter (a blue/white cross symbol on the upper right hand side of the QGIS GUI, but the location mat differ in your distribution).

- In the newly opened Python command line Console window, click the "Show Editor" button above the Console, which opens a text editor.

- In the latter text editor, click the "Open File" symbol (folder symbol) and navigate to the directory with the downloaded folders.

- Within the "src" directory, open "Example_GeographicSubset.py" by double-clicking. Change the following directory paths according to your environment:

  	 - outpathPolygon = "C:/YOUR_PATH/Polygon-Windowing/models/CapeCod1_Polygon.gpkg"
	 - bigConfigFile = "C:/YOUR_PATH//Polygon-Windowing/src/ConusPolygonWindowing_CapeCod.yaml"
	 - outpathGeopackage = "C:/YOUR_PATH/Polygon-Windowing/models/CapeCod1_Package.gpkg",

	 and save the file (disk symbol)

- In the QGIS Python text editor again, click the "Open File" symbol and navigate to the directory with the downloaded folders, again to the "src" directory and open "ConusPolygonWindowing_CapeCod.yaml" by double-clicking.

- Copy your large geopackage file into the "models" directory (below, it's called "conus_31Aug2023.gpkg"

- In the .yaml file, change the file paths to reflect the position of the geopackage file in your file system:

     	 - geo_file_path: C:/YOUR_PATH/Polygon-Windowing/models/conus_31Aug2023.gpkg
	 - level_pool_waterbody_parameter_file_path: C:/YOUR_PATH/Polygon-Windowing/models/conus_31Aug2023.gpkg,

	 and save the file (disk symbol).
	 
- In the Python text editor again, navigate to the tab with the "Example_GeographicSubset.py" file and run the code by clicking the "Run" button (green arrow). An example windowed model was prepackaged (CapeCod1_Package.gpkg in "models") for illustration, and corresponds to the quadrilateral example polygon extracting part of the conus geopackage.

